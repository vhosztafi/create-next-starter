name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  # Validation job - runs on all pushes and PRs
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm --filter @solutioniser/create-next-starter run lint || echo "Lint script not found, skipping..."

      - name: Type check
        run: pnpm --filter @solutioniser/create-next-starter run type-check || echo "Type-check script not found, skipping..."

      - name: Run tests
        run: pnpm --filter @solutioniser/create-next-starter run test || echo "Test script not found, skipping..."

      - name: Build package
        run: pnpm --filter @solutioniser/create-next-starter run build

      - name: Verify build output
        run: |
          if [ ! -d "packages/create-next-starter/dist" ]; then
            echo "Build failed - dist directory not found"
            exit 1
          fi
          if [ ! -f "packages/create-next-starter/dist/index.js" ]; then
            echo "Build failed - main entry point not found"
            exit 1
          fi
          echo "Build verification successful"

  # Publish job - runs only on releases and version bumps
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'chore(release)'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm --filter @solutioniser/create-next-starter run build

      - name: Check if package should be published
        id: should-publish
        run: |
          cd packages/create-next-starter
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Check if this version already exists on npm
          if npm view @solutioniser/create-next-starter@$CURRENT_VERSION version > /dev/null 2>&1; then
            echo "Version $CURRENT_VERSION already exists on npm, skipping publish"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version $CURRENT_VERSION not found on npm, will publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.should-publish.outputs.should_publish == 'true'
        run: |
          cd packages/create-next-starter
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: github.event_name == 'release'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.release.tag_name }}
          release_name: ${{ github.event.release.name }}
          body: ${{ github.event.release.body }}
          draft: false
          prerelease: ${{ contains(github.event.release.tag_name, 'alpha') || contains(github.event.release.tag_name, 'beta') || contains(github.event.release.tag_name, 'rc') }}

  # Security audit job
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

  # Dependency update job (optional - runs weekly)
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 0 * * 1' # Run every Monday
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install

      - name: Update dependencies
        run: pnpm update --interactive

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'chore: update dependencies'
          body: 'Automated dependency update'
          branch: 'deps/update-$(date +%Y%m%d)'
